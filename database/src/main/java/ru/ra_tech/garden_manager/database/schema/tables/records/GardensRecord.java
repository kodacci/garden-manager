/*
 * This file is generated by jOOQ.
 */
package ru.ra_tech.garden_manager.database.schema.tables.records;


import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import ru.ra_tech.garden_manager.database.schema.tables.Gardens;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GardensRecord extends UpdatableRecordImpl<GardensRecord> implements Record8<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.gardens.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.gardens.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.gardens.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.gardens.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.gardens.address</code>.
     */
    public void setAddress(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.gardens.address</code>.
     */
    public String getAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.gardens.owner</code>.
     */
    public void setOwner(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.gardens.owner</code>.
     */
    public Integer getOwner() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.gardens.deleted</code>.
     */
    public void setDeleted(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.gardens.deleted</code>.
     */
    public Boolean getDeleted() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.gardens.createdAt</code>.
     */
    public void setCreatedat(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.gardens.createdAt</code>.
     */
    public OffsetDateTime getCreatedat() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.gardens.updatedAt</code>.
     */
    public void setUpdatedat(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.gardens.updatedAt</code>.
     */
    public OffsetDateTime getUpdatedat() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.gardens.deletedAt</code>.
     */
    public void setDeletedat(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.gardens.deletedAt</code>.
     */
    public OffsetDateTime getDeletedat() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Gardens.GARDENS.ID;
    }

    @Override
    public Field<String> field2() {
        return Gardens.GARDENS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Gardens.GARDENS.ADDRESS;
    }

    @Override
    public Field<Integer> field4() {
        return Gardens.GARDENS.OWNER;
    }

    @Override
    public Field<Boolean> field5() {
        return Gardens.GARDENS.DELETED;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Gardens.GARDENS.CREATEDAT;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return Gardens.GARDENS.UPDATEDAT;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return Gardens.GARDENS.DELETEDAT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getAddress();
    }

    @Override
    public Integer component4() {
        return getOwner();
    }

    @Override
    public Boolean component5() {
        return getDeleted();
    }

    @Override
    public OffsetDateTime component6() {
        return getCreatedat();
    }

    @Override
    public OffsetDateTime component7() {
        return getUpdatedat();
    }

    @Override
    public OffsetDateTime component8() {
        return getDeletedat();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getAddress();
    }

    @Override
    public Integer value4() {
        return getOwner();
    }

    @Override
    public Boolean value5() {
        return getDeleted();
    }

    @Override
    public OffsetDateTime value6() {
        return getCreatedat();
    }

    @Override
    public OffsetDateTime value7() {
        return getUpdatedat();
    }

    @Override
    public OffsetDateTime value8() {
        return getDeletedat();
    }

    @Override
    public GardensRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public GardensRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public GardensRecord value3(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public GardensRecord value4(Integer value) {
        setOwner(value);
        return this;
    }

    @Override
    public GardensRecord value5(Boolean value) {
        setDeleted(value);
        return this;
    }

    @Override
    public GardensRecord value6(OffsetDateTime value) {
        setCreatedat(value);
        return this;
    }

    @Override
    public GardensRecord value7(OffsetDateTime value) {
        setUpdatedat(value);
        return this;
    }

    @Override
    public GardensRecord value8(OffsetDateTime value) {
        setDeletedat(value);
        return this;
    }

    @Override
    public GardensRecord values(Integer value1, String value2, String value3, Integer value4, Boolean value5, OffsetDateTime value6, OffsetDateTime value7, OffsetDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GardensRecord
     */
    public GardensRecord() {
        super(Gardens.GARDENS);
    }

    /**
     * Create a detached, initialised GardensRecord
     */
    public GardensRecord(Integer id, String name, String address, Integer owner, Boolean deleted, OffsetDateTime createdat, OffsetDateTime updatedat, OffsetDateTime deletedat) {
        super(Gardens.GARDENS);

        setId(id);
        setName(name);
        setAddress(address);
        setOwner(owner);
        setDeleted(deleted);
        setCreatedat(createdat);
        setUpdatedat(updatedat);
        setDeletedat(deletedat);
        resetChangedOnNotNull();
    }
}
