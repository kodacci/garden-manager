def DEPLOY_GIT_SCOPE
def DEPLOY_NAMESPACE
def NAMESPACE_APP_HOST
def APP_DB_HOST
def APP_DB_PORT

def generateExtHttp(namespace, name, host) {
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/service-entry.yaml > distrib/${name}-service-entry.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/virtual-service.yaml > distrib/${name}-virtual-service.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/destination-rule.yaml > distrib/${name}-destination-rule.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/service.yaml > distrib/${name}-service.yaml"

    return "-f distrib/${name}-service.yaml " +
            "-f distrib/${name}-service-entry.yaml " +
            "-f distrib/${name}-virtual-service.yaml " +
            "-f distrib/${name}-destination-rule.yaml "
}

def generateImageTag(container) {
    def scope = sh(encoding: 'UTF-8', returnStdout: true, script: 'git name-rev --name-only HEAD')
            .trim()
            .tokenize('/')
            .last()
            .toLowerCase()

    return 'pro.ra-tech/garden-manager/' + scope + '/' + container + ':latest'
}

pipeline {
    agent { label 'jenkins-agent1' }

    parameters {
        string(name: 'core_image', description: 'Core image tag to use in deploy')
        string(name: 'core_db_migrate_image', description: 'Core db migrations image')
    }

    stages {
        stage('Determine git scope') {
            steps {
                script {
                    DEPLOY_GIT_SCOPE = BRANCH_NAME.tokenize('/').last().toLowerCase()
                    echo "Git branch scope: '${DEPLOY_GIT_SCOPE}'"
                }
            }
        }

        stage('Determine stand specific params') {
            steps {
                script {
                    if (BRANCH_NAME.startsWith('release/')) {
                        DEPLOY_NAMESPACE = 'garden-manager'
                        NAMESPACE_APP_HOST = 'api.garden-manager.cloud.ra-tech.pro'
                        APP_DB_HOST = 'api.garden-manager.db.ra-tech.pro'
                        APP_DB_PORT = '3333'
                    } else {
                        DEPLOY_NAMESPACE = 'garden-manager-test'
                        NAMESPACE_APP_HOST = 'api.garden-manager.test.cloud.ra-tech.pro'
                        APP_DB_HOST = 'garden-manager.db.ra-tech.pro'
                        APP_DB_PORT = '4444'
                    }
                    echo "Namespace to deploy app: $DEPLOY_NAMESPACE"
                    echo "App host: $NAMESPACE_APP_HOST"
                    echo "Database: $APP_DB_HOST:$APP_DB_PORT"
                }
            }
        }

        stage('Cleanup k8s namespace') {
            steps {
                script {
                    def namespace = DEPLOY_NAMESPACE
                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        sh 'kubectl version'

                        echo "Deleting core deployment and pods"
                        sh "kubectl delete deployment -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl wait --for=delete pod -l app=garden-manager-core --timeout 10m -n $namespace"

                        echo "Deleting other core manifests"
                        sh "kubectl delete service -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete virtualservice -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete destinationrule -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete gateway -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete networkpolicy -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete configmap -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete job -l app.kubernetes.io/component=core -n $namespace"
                    }
                }
            }
        }

        stage('Deploy to k8s') {
            steps {
                script {
                    def namespace = DEPLOY_NAMESPACE
                    def host = NAMESPACE_APP_HOST
                    def dbHost = APP_DB_HOST
                    def dbAddress = sh(
                            encoding: 'UTF-8',
                            returnStdout: true,
                            script: """getent hosts garden-manager.db.ra-tech.pro | awk 'NR==1{ print \$1 }'"""
                    ).trim()
                    def dbPort = APP_DB_PORT
                    def egressTcpPort = '9999'
                    def solrHost = 'solr.ra-tech.pro'
                    def vaultHost = 'vault.ra-tech.pro'

                    def solrApply = ""
                    def vaultApply = ""

                    def coreImageTag = params.core_app_image ? params.core_app_image : generateImageTag('garden-manager-core')
                    def dbMigrateImageTag = params.core_db_migrate_image ? params.core_db_migrate_image : generateImageTag('core-db-migrate')

                    withPythonEnv('Python-3') {
                        sh 'pip install -U jinja2-cli'

                        // main app
                        sh "jinja2 -D branch=$DEPLOY_GIT_SCOPE -D namespace=$namespace -D db_host=$dbHost -D db_port=$dbPort -D image_tag=$coreImageTag -Dvault_address=http://${vaultHost} distrib/templates/deployment.yaml > distrib/deployment.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/service.yaml > distrib/service.yaml"
                        sh "jinja2 -D namespace=$namespace -D db_host=$dbHost -D db_port=$dbPort distrib/templates/network-policy.yaml > distrib/network-policy.yaml"
                        sh "jinja2 -D namespace=$namespace -D host=$host distrib/templates/ingress-gateway.yaml > distrib/ingress-gateway.yaml"
                        sh "jinja2 -D namespace=$namespace -D db_host=$dbHost -D egress_tcp_port=$egressTcpPort -D solr_host=$solrHost -D vault_host=$vaultHost distrib/templates/egress-gateway.yaml > distrib/egress-gateway.yaml"
                        sh "jinja2 -D namespace=$namespace -D host=$host distrib/templates/virtual-service.yaml > distrib/virtual-service.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/destination-rule.yaml > distrib/destination-rule.yaml"
                        sh "jinja2 -D namespace=$namespace -D solr_collection=$namespace distrib/templates/configmaps/fluentbit.yaml > distrib/fluentbit.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/egw-destination-rule.yaml > distrib/egw-destination-rule.yaml"

                        // db-migrate
                        sh "jinja2 -D namespace=$namespace -Dvault_address=http://${vaultHost} -D image_tag=$dbMigrateImageTag distrib/templates/core-db-migrate-job.yaml > distrib/core-db-migrate-job.yaml"

                        // database
                        sh "jinja2 -D namespace=$namespace -D db_host=$dbHost -D db_port=$dbPort -D db_address=$dbAddress distrib/templates/db/db-service-entry.yaml > distrib/db-service-entry.yaml"
                        sh "jinja2 -D namespace=$namespace -D db_host=$dbHost -D db_port=$dbPort -D db_address=$dbAddress -D egress_tcp_port=$egressTcpPort distrib/templates/db/db-virtual-service.yaml > distrib/db-virtual-service.yaml"
                        sh "jinja2 -D namespace=$namespace -D db_host=$dbHost -D db_port=$dbPort distrib/templates/db/db-destination-rule.yaml > distrib/db-destination-rule.yaml"
                        sh "jinja2 -D namespace=$namespace -D db_port=$dbPort -D db_address=$dbAddress distrib/templates/db/db-service.yaml > distrib/db-service.yaml"

                        // Solr
                        solrApply = generateExtHttp(namespace, 'solr', solrHost)

                        // Vault
                        vaultApply = generateExtHttp(namespace, 'vault', vaultHost)
                        sh "jinja2 -D namespace=$namespace -Dvault_addr=http://${vaultHost} distrib/templates/configmaps/core-vault-agent.yaml > distrib/core-vault-agent.yaml"
                        sh "jinja2 -D namespace=$namespace -Dvault_addr=http://${vaultHost} distrib/templates/configmaps/db-migrate-vault-agent.yaml > distrib/db-migrate-vault-agent.yaml"
                    }

                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        echo "Applying core manifests"
                        sh 'kubectl apply ' +
                                '-f distrib/fluentbit.yaml ' +
                                '-f distrib/db-migrate-vault-agent.yaml ' +
                                '-f distrib/core-vault-agent.yaml ' +
                                '-f distrib/network-policy.yaml ' +
                                '-f distrib/service.yaml ' +
                                '-f distrib/ingress-gateway.yaml ' +
                                '-f distrib/egress-gateway.yaml ' +
                                '-f distrib/virtual-service.yaml ' +
                                '-f distrib/destination-rule.yaml ' +
                                '-f distrib/egw-destination-rule.yaml ' +
                                '-f distrib/db-service.yaml ' +
                                '-f distrib/db-service-entry.yaml ' +
                                '-f distrib/db-virtual-service.yaml ' +
                                '-f distrib/db-destination-rule.yaml ' +
                                solrApply +
                                vaultApply

                        // Run db migrations job
                        echo "Starting db migrations job"
                        sh 'kubectl apply -f distrib/core-db-migrate-job.yaml'
                        echo "Waiting for db migrations job to succeed"
                        sh "kubectl wait --for=condition=complete --timeout=5m -n $namespace job/core-db-migrate"

                        // Deploying main app
                        sh 'kubectl apply -f distrib/deployment.yaml'
                    }
                }
            }
        }
    }
}